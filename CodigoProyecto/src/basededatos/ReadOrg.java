/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package basededatos;

import java.awt.Color;
import java.awt.Dimension;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author María Arango
 */
public class ReadOrg extends BaseDeDatos {
    private static String user;   
    /**
     * Creates new form ReadOrg
     * @param user
     */
    public ReadOrg(String user) {
        initComponents();
        this.user = user;
        fullYear();
        setEnable();
    }
    
    public void fullYear() {
        int aux = 1999;
        for(int i = 0; i < 20; ++i){
            year1.addItem(aux);
            year2.addItem(aux);
            ++aux;
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        energy = new javax.swing.JRadioButton();
        aqueduct = new javax.swing.JRadioButton();
        internet = new javax.swing.JRadioButton();
        sewerage = new javax.swing.JRadioButton();
        gas = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        tv = new javax.swing.JRadioButton();
        telephony = new javax.swing.JRadioButton();
        bGraficar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        list = new javax.swing.JList<>();
        boxMonth1 = new javax.swing.JComboBox<>();
        lblmonth2 = new javax.swing.JLabel();
        lblyear2 = new javax.swing.JLabel();
        lblmonth1 = new javax.swing.JLabel();
        boxMonth2 = new javax.swing.JComboBox<>();
        lblyear1 = new javax.swing.JLabel();
        vs = new javax.swing.JLabel();
        year1 = new javax.swing.JComboBox<>();
        year2 = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Criterios de consulta");

        energy.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        energy.setText("Energía");
        energy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                energyActionPerformed(evt);
            }
        });

        aqueduct.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        aqueduct.setText("Acueducto");
        aqueduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aqueductActionPerformed(evt);
            }
        });

        internet.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        internet.setText("Internet");
        internet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                internetActionPerformed(evt);
            }
        });

        sewerage.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        sewerage.setText("Alcantarillado");
        sewerage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sewerageActionPerformed(evt);
            }
        });

        gas.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        gas.setText("Gas");
        gas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gasActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel3.setText("Consultas");

        tv.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tv.setText("Televisión");
        tv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tvActionPerformed(evt);
            }
        });

        telephony.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        telephony.setText("Telefonía");
        telephony.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                telephonyActionPerformed(evt);
            }
        });

        bGraficar.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        bGraficar.setText("Graficar");
        bGraficar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bGraficarActionPerformed(evt);
            }
        });

        list.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        list.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(list);

        boxMonth1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        boxMonth1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre" }));

        lblmonth2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblmonth2.setText("Mes");

        lblyear2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblyear2.setText("Año");

        lblmonth1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblmonth1.setText("Mes");

        boxMonth2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        boxMonth2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre" }));

        lblyear1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblyear1.setText("Año");

        vs.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        vs.setText("VS");

        year1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N

        year2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(411, 411, 411))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(internet)
                            .addComponent(tv)
                            .addComponent(gas)
                            .addComponent(energy)
                            .addComponent(sewerage)
                            .addComponent(aqueduct)
                            .addComponent(telephony)
                            .addComponent(year1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(year2, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(lblyear2)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(96, 96, 96)
                        .addComponent(lblmonth2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(63, 63, 63)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(boxMonth2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(boxMonth1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addComponent(lblyear1)
                .addGap(184, 184, 184)
                .addComponent(lblmonth1)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(110, 110, 110)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(129, 129, 129)
                        .addComponent(bGraficar))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(172, 172, 172)
                        .addComponent(vs)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(energy)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(aqueduct)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sewerage)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gas)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tv)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(internet)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(telephony)
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblyear1)
                    .addComponent(lblmonth1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(year1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(boxMonth1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(vs)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblyear2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblmonth2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(boxMonth2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(year2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addComponent(bGraficar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setBounds(0, 0, 408, 623);
    }// </editor-fold>//GEN-END:initComponents

    private void bGraficarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bGraficarActionPerformed
        try{
            if (energy.isSelected()) {
                if(list.getSelectedValuesList().isEmpty()){ JOptionPane.showMessageDialog(null,
                                                           "Debe elegir los datos que desea graficar.",
                                                           "Error Message",
                                                           JOptionPane.ERROR_MESSAGE);}
                else {
                    String consulta = list.getSelectedValue();
                    //System.out.println(consulta);
                    if(consulta.equals("Costo por mes")){
                        ResultSet x = this.peticion("select consultEnergyCMonth('" + (String)boxMonth1.getSelectedItem() + "')");
                        ResultSet y = this.peticion("select consultEnergyCMonth('" + (String)boxMonth2.getSelectedItem() + "')");
                        
                        System.out.println("select consultEnergyCMonth('" + (String)boxMonth2.getSelectedItem() + "')");
                        System.out.println("select consultEnergyCMonth('" + (String)boxMonth1.getSelectedItem() + "')");
                        DefaultCategoryDataset dc = new DefaultCategoryDataset();
                        
                        while(x.next() && y.next()){
                            dc.setValue(x.getDouble(1), "Valor", (String)boxMonth1.getSelectedItem());
                            dc.setValue(y.getDouble(1), "Valor", (String)boxMonth2.getSelectedItem());
                        }
                        
                        JFreeChart c = ChartFactory.createBarChart("Costo por mes", "Mes", "Costo", dc, PlotOrientation.HORIZONTAL, false, true, false);
                        CategoryPlot cp = c.getCategoryPlot();
                        cp.setRangeGridlinePaint(Color.BLACK);
                        ChartFrame cf = new ChartFrame("BarChar para costo energía por mes", c);
                        cf.setVisible(true);
                        cf.setSize(450, 350);
                        
                    }
                    
                    if(consulta.equals("Consumo (KWH)")) {
                        ResultSet x = this.peticion("select consultEnergConsumptio('" + boxMonth1.getSelectedItem() + "')");
                        ResultSet y = this.peticion("select consultEnergConsumptio('" + boxMonth2.getSelectedItem() + "')"); 
                        DefaultCategoryDataset dc = new DefaultCategoryDataset();
                        
                        while(x.next() && y.next()){
                            dc.setValue(x.getDouble(1), "Valor", (String)boxMonth1.getSelectedItem());
                            dc.setValue(y.getDouble(1), "Valor", (String)boxMonth2.getSelectedItem());
                        }
                        
                        JFreeChart c = ChartFactory.createBarChart("Consumo por mes", "Mes", "Consumo", dc, PlotOrientation.HORIZONTAL, false, true, false);
                        CategoryPlot cp = c.getCategoryPlot();
                        cp.setRangeGridlinePaint(Color.BLACK);
                        ChartFrame cf = new ChartFrame("BarChar para consumo energía", c);
                        cf.setVisible(true);
                        cf.setSize(450, 350);
                    }
                    
                    if(consulta.equals("Costo unitario")){
                        ResultSet x = this.peticion("select consultEnergyUcost('" + boxMonth1.getSelectedItem() + "')");
                        ResultSet y = this.peticion("select consultEnergyUCost('" + boxMonth2.getSelectedItem() + "')");
                        
                        DefaultCategoryDataset dc = new DefaultCategoryDataset();
                        
                        while(x.next() && y.next()){
                            dc.setValue(x.getDouble(1), "Valor", (String)boxMonth1.getSelectedItem());
                            dc.setValue(y.getDouble(1), "Valor", (String)boxMonth2.getSelectedItem());
                        }
                        
                        JFreeChart c = ChartFactory.createBarChart("Costo unitario", "Mes", "Costo unitario", dc, PlotOrientation.VERTICAL, false, true, false);
                        CategoryPlot cp = c.getCategoryPlot();
                        cp.setRangeGridlinePaint(Color.BLACK);
                        ChartFrame cf = new ChartFrame("BarChar para costo unitario energía", c);
                        cf.setVisible(true);
                        cf.setSize(450, 350);
                    }
                    
                    if(consulta.equals("Beneficio")){
                        ResultSet x = this.peticion("select consultEnergyBenefit('" + boxMonth1.getSelectedItem() + "')");
                        ResultSet y = this.peticion("select consultEnergyBenefit('" + boxMonth2.getSelectedItem() + "')");
                        
                        DefaultCategoryDataset dc = new DefaultCategoryDataset();
                        
                        while(x.next() && y.next()){
                            dc.setValue(x.getDouble(1), "Valor", (String)boxMonth1.getSelectedItem());
                            dc.setValue(y.getDouble(1), "Valor", (String)boxMonth2.getSelectedItem());
                        }
                        
                        JFreeChart c = ChartFactory.createBarChart("Beneficio", "Mes", "Costo", dc, PlotOrientation.VERTICAL, false, true, false);
                        CategoryPlot cp = c.getCategoryPlot();
                        cp.setRangeGridlinePaint(Color.BLACK);
                        ChartFrame cf = new ChartFrame("BarChar para beneficio energía", c);
                        cf.setVisible(true);
                        cf.setSize(450, 350);
                    }
                }
                
            } else if(aqueduct.isSelected()){
                if(list.getSelectedValuesList().isEmpty()) JOptionPane.showMessageDialog(null,
                                                           "Debe elegir los datos que desea graficar.",
                                                           "Error Message",
                                                           JOptionPane.ERROR_MESSAGE);
                else {
                    String consulta = list.getSelectedValue();
                    
                    if(consulta.equals("Costo por mes")){
                        ResultSet x = this.peticion("select consultAqueductCMonth('" + boxMonth1.getSelectedItem() + "')");
                        ResultSet y = this.peticion("select consultAqueductCMonth('" + boxMonth2.getSelectedItem() + "')");
                        
                        DefaultCategoryDataset dc = new DefaultCategoryDataset();
                        
                        while(x.next() && y.next()){
                            dc.setValue(x.getDouble(1), "Valor", (String)boxMonth1.getSelectedItem());
                            dc.setValue(y.getDouble(1), "Valor", (String)boxMonth2.getSelectedItem());
                        }
                        
                        JFreeChart c = ChartFactory.createBarChart("Costo por mes", "Mes", "Costo", dc, PlotOrientation.VERTICAL, false, true, false);
                        CategoryPlot cp = c.getCategoryPlot();
                        cp.setRangeGridlinePaint(Color.BLACK);
                        ChartFrame cf = new ChartFrame("BarChar para costo por mes acueducto", c);
                        cf.setVisible(true);
                        cf.setSize(450, 350);
                    }
                    
                    if(consulta.equals("Consumo (M3)")) {
                        ResultSet x = this.peticion("select consultAqueductConsumption('" + boxMonth1.getSelectedItem() + "')");
                        ResultSet y = this.peticion("select consultAqueductConsumption('" + boxMonth2.getSelectedItem() + "')"); 
                        
                        DefaultCategoryDataset dc = new DefaultCategoryDataset();
                        
                        while(x.next() && y.next()){
                            dc.setValue(x.getDouble(1), "Valor", (String)boxMonth1.getSelectedItem());
                            dc.setValue(y.getDouble(1), "Valor", (String)boxMonth2.getSelectedItem());
                        }
                        
                        JFreeChart c = ChartFactory.createBarChart("Consumo por mes", "Mes", "Costo", dc, PlotOrientation.VERTICAL, false, true, false);
                        CategoryPlot cp = c.getCategoryPlot();
                        cp.setRangeGridlinePaint(Color.BLACK);
                        ChartFrame cf = new ChartFrame("BarChar para consumo acueducto", c);
                        cf.setVisible(true);
                        cf.setSize(450, 350);
                    }
                    
                    if(consulta.equals("Costo unitario")){
                        ResultSet x = this.peticion("select consultAqueductUcost('" + boxMonth1.getSelectedItem() + "')");
                        ResultSet y = this.peticion("select consultAqueductUCost('" + boxMonth2.getSelectedItem() + "')");
                        
                        DefaultCategoryDataset dc = new DefaultCategoryDataset();
                        
                        while(x.next() && y.next()){
                            dc.setValue(x.getDouble(1), "Valor", (String)boxMonth1.getSelectedItem());
                            dc.setValue(y.getDouble(1), "Valor", (String)boxMonth2.getSelectedItem());
                        }
                        
                        JFreeChart c = ChartFactory.createBarChart("Costo unitario", "Mes", "Costo", dc, PlotOrientation.VERTICAL, false, true, false);
                        CategoryPlot cp = c.getCategoryPlot();
                        cp.setRangeGridlinePaint(Color.BLACK);
                        ChartFrame cf = new ChartFrame("BarChar para costo unitario acueducto", c);
                        cf.setVisible(true);
                        cf.setSize(450, 350);
                    }
                    
                    if(consulta.equals("Beneficio")){
                        ResultSet x = this.peticion("select consultAqueductBenefit('" + boxMonth1.getSelectedItem() + "')");
                        ResultSet y = this.peticion("select consultAqueductBenefit('" + boxMonth2.getSelectedItem() + "')");
                        DefaultCategoryDataset dc = new DefaultCategoryDataset();
                        
                        while(x.next() && y.next()){
                            dc.setValue(x.getDouble(1), "Valor", (String)boxMonth1.getSelectedItem());
                            dc.setValue(y.getDouble(1), "Valor", (String)boxMonth2.getSelectedItem());
                        }
                        
                        JFreeChart c = ChartFactory.createBarChart("Beneficio", "Mes", "Costo", dc, PlotOrientation.VERTICAL, false, true, false);
                        CategoryPlot cp = c.getCategoryPlot();
                        cp.setRangeGridlinePaint(Color.BLACK);
                        ChartFrame cf = new ChartFrame("BarChar para beneficio acueducto", c);
                        cf.setVisible(true);
                        cf.setSize(450, 350);
                    }
                }
                
            } else if(sewerage.isSelected()){
                if(list.getSelectedValuesList().isEmpty()) JOptionPane.showMessageDialog(null,
                                "Debe elegir los datos que desea graficar.",
                                "Error Message",
                                JOptionPane.ERROR_MESSAGE);
                else {
                    String consulta = list.getSelectedValue();
                    
                    if(consulta.equals("Costo por mes")){
                        ResultSet x = this.peticion("select consultSewerageCMonth('" + boxMonth1.getSelectedItem() + "')");
                        ResultSet y = this.peticion("select consultSewerageCMonth('" + boxMonth2.getSelectedItem() + "')");
                        DefaultCategoryDataset dc = new DefaultCategoryDataset();
                        
                        while(x.next() && y.next()){
                            dc.setValue(x.getDouble(1), "Valor", (String)boxMonth1.getSelectedItem());
                            dc.setValue(y.getDouble(1), "Valor", (String)boxMonth2.getSelectedItem());
                        }
                        
                        JFreeChart c = ChartFactory.createBarChart("Costo por mes", "Mes", "Costo", dc, PlotOrientation.VERTICAL, false, true, false);
                        CategoryPlot cp = c.getCategoryPlot();
                        cp.setRangeGridlinePaint(Color.BLACK);
                        ChartFrame cf = new ChartFrame("BarChar para costo por mes alcantarillado", c);
                        cf.setVisible(true);
                        cf.setSize(450, 350);
                    }
                    
                    if(consulta.equals("Consumo (M3)")) {
                        ResultSet x = this.peticion("select consultSewerageConsumption('" + boxMonth1.getSelectedItem() + "')");
                        ResultSet y = this.peticion("select consultSewerageConsumption('" + boxMonth2.getSelectedItem() + "')"); 
                        DefaultCategoryDataset dc = new DefaultCategoryDataset();
                        
                        while(x.next() && y.next()){
                            dc.setValue(x.getDouble(1), "Valor", (String)boxMonth1.getSelectedItem());
                            dc.setValue(y.getDouble(1), "Valor", (String)boxMonth2.getSelectedItem());
                        }
                        
                        JFreeChart c = ChartFactory.createBarChart("Consumo por mes", "Mes", "Costo", dc, PlotOrientation.VERTICAL, false, true, false);
                        CategoryPlot cp = c.getCategoryPlot();
                        cp.setRangeGridlinePaint(Color.BLACK);
                        ChartFrame cf = new ChartFrame("BarChar para consumo acueducto", c);
                        cf.setVisible(true);
                        cf.setSize(450, 350);
                    }
                    
                    if(consulta.equals("Costo unitario")){
                        ResultSet x = this.peticion("select consultSewerageUcost('" + boxMonth1.getSelectedItem() + "')");
                        ResultSet y = this.peticion("select consultSewerageUCost('" + boxMonth2.getSelectedItem() + "')");
                        DefaultCategoryDataset dc = new DefaultCategoryDataset();
                        
                        while(x.next() && y.next()){
                            dc.setValue(x.getDouble(1), "Valor", (String)boxMonth1.getSelectedItem());
                            dc.setValue(y.getDouble(1), "Valor", (String)boxMonth2.getSelectedItem());
                        }
                        
                        JFreeChart c = ChartFactory.createBarChart("Costo unitario", "Mes", "Costo", dc, PlotOrientation.VERTICAL, false, true, false);
                        CategoryPlot cp = c.getCategoryPlot();
                        cp.setRangeGridlinePaint(Color.BLACK);
                        ChartFrame cf = new ChartFrame("BarChar para costo unitario acueducto", c);
                        cf.setVisible(true);
                        cf.setSize(450, 350);
                    }
                    
                    if(consulta.equals("Beneficio")){
                        ResultSet x = this.peticion("select consultSewerageBenefit('" + boxMonth1.getSelectedItem() + "')");
                        ResultSet y = this.peticion("select consultSewerageBenefit('" + boxMonth2.getSelectedItem() + "')");
                        DefaultCategoryDataset dc = new DefaultCategoryDataset();
                        
                        while(x.next() && y.next()){
                            dc.setValue(x.getDouble(1), "Valor", (String)boxMonth1.getSelectedItem());
                            dc.setValue(y.getDouble(1), "Valor", (String)boxMonth2.getSelectedItem());
                        }
                        
                        JFreeChart c = ChartFactory.createBarChart("Beneficio", "Mes", "Costo", dc, PlotOrientation.VERTICAL, false, true, false);
                        CategoryPlot cp = c.getCategoryPlot();
                        cp.setRangeGridlinePaint(Color.BLACK);
                        ChartFrame cf = new ChartFrame("BarChar para beneficio acueducto", c);
                        cf.setVisible(true);
                        cf.setSize(450, 350);
                    }
                }
            
            } else if(gas.isSelected()){
                if(list.getSelectedValuesList().isEmpty()) JOptionPane.showMessageDialog(null,
                                "Debe elegir los datos que desea graficar.",
                                "Error Message",
                                JOptionPane.ERROR_MESSAGE);
                else {
                    String consulta = list.getSelectedValue();
                    
                    if(consulta.equals("Costo por mes")){
                        ResultSet x = this.peticion("select consultGasCMonth('" + boxMonth1.getSelectedItem() + "')");
                        ResultSet y = this.peticion("select consultGasCMonth('" + boxMonth2.getSelectedItem() + "')");
                        DefaultCategoryDataset dc = new DefaultCategoryDataset();
                        
                        while(x.next() && y.next()){
                            dc.setValue(x.getDouble(1), "Valor", (String)boxMonth1.getSelectedItem());
                            dc.setValue(y.getDouble(1), "Valor", (String)boxMonth2.getSelectedItem());
                        }
                        
                        JFreeChart c = ChartFactory.createBarChart("Costo por mes", "Mes", "Costo", dc, PlotOrientation.VERTICAL, false, true, false);
                        CategoryPlot cp = c.getCategoryPlot();
                        cp.setRangeGridlinePaint(Color.BLACK);
                        ChartFrame cf = new ChartFrame("BarChar para costo gas por mes", c);
                        cf.setVisible(true);
                        cf.setSize(450, 350);
                    }
                    
                    if(consulta.equals("Consumo (M3)")) {
                        ResultSet x = this.peticion("select consultGasConsumption('" + boxMonth1.getSelectedItem() + "')");
                        ResultSet y = this.peticion("select consultGasConsumption('" + boxMonth2.getSelectedItem() + "')"); 
                        DefaultCategoryDataset dc = new DefaultCategoryDataset();
                        
                        while(x.next() && y.next()){
                            dc.setValue(x.getDouble(1), "Valor", (String)boxMonth1.getSelectedItem());
                            dc.setValue(y.getDouble(1), "Valor", (String)boxMonth2.getSelectedItem());
                        }
                        
                        JFreeChart c = ChartFactory.createBarChart("Consumo por mes", "Mes", "Costo", dc, PlotOrientation.VERTICAL, false, true, false);
                        CategoryPlot cp = c.getCategoryPlot();
                        cp.setRangeGridlinePaint(Color.BLACK);
                        ChartFrame cf = new ChartFrame("BarChar para consumo gas", c);
                        cf.setVisible(true);
                        cf.setSize(450, 350);
                    }
                    
                    if(consulta.equals("Costo unitario")){
                        ResultSet x = this.peticion("select consultGasUcost('" + boxMonth1.getSelectedItem() + "')");
                        ResultSet y = this.peticion("select consultGasUCost('" + boxMonth2.getSelectedItem() + "')");
                        DefaultCategoryDataset dc = new DefaultCategoryDataset();
                        
                        while(x.next() && y.next()){
                            dc.setValue(x.getDouble(1), "Valor", (String)boxMonth1.getSelectedItem());
                            dc.setValue(y.getDouble(1), "Valor", (String)boxMonth2.getSelectedItem());
                        }
                        
                        JFreeChart c = ChartFactory.createBarChart("Costo unitario", "Mes", "Costo", dc, PlotOrientation.VERTICAL, false, true, false);
                        CategoryPlot cp = c.getCategoryPlot();
                        cp.setRangeGridlinePaint(Color.BLACK);
                        ChartFrame cf = new ChartFrame("BarChar para costo unitario gas", c);
                        cf.setVisible(true);
                        cf.setSize(450, 350);
                    }
                    
                    if(consulta.equals("Beneficio")){
                        ResultSet x = this.peticion("select consultGasBenefit('" + boxMonth1.getSelectedItem() + "')");
                        ResultSet y = this.peticion("select consultGasBenefit('" + boxMonth2.getSelectedItem() + "')");
                        DefaultCategoryDataset dc = new DefaultCategoryDataset();
                        
                        while(x.next() && y.next()){
                            dc.setValue(x.getDouble(1), "Valor", (String)boxMonth1.getSelectedItem());
                            dc.setValue(y.getDouble(1), "Valor", (String)boxMonth2.getSelectedItem());
                        }
                        
                        JFreeChart c = ChartFactory.createBarChart("Beneficio", "Mes", "Costo", dc, PlotOrientation.VERTICAL, false, true, false);
                        CategoryPlot cp = c.getCategoryPlot();
                        cp.setRangeGridlinePaint(Color.BLACK);
                        ChartFrame cf = new ChartFrame("BarChar para beneficio gas", c);
                        cf.setVisible(true);
                        cf.setSize(450, 350);
                    }
                    
                    if(consulta.equals("Diferencia (M3)")){
                        ResultSet x = this.peticion("select consultGasDiference('" + boxMonth1.getSelectedItem() + "')");
                        ResultSet y = this.peticion("select consultGasDiference('" + boxMonth2.getSelectedItem() + "')");
                        DefaultCategoryDataset dc = new DefaultCategoryDataset();
                        
                        while(x.next() && y.next()){
                            dc.setValue(x.getDouble(1), "Valor", (String)boxMonth1.getSelectedItem());
                            dc.setValue(y.getDouble(1), "Valor", (String)boxMonth2.getSelectedItem());
                        }
                        
                        JFreeChart c = ChartFactory.createBarChart("Diferencias (M3)", "Mes", "Costo", dc, PlotOrientation.VERTICAL, false, true, false);
                        CategoryPlot cp = c.getCategoryPlot();
                        cp.setRangeGridlinePaint(Color.BLACK);
                        ChartFrame cf = new ChartFrame("BarChar para diferencia gas (M3)", c);
                        cf.setVisible(true);
                        cf.setSize(450, 350);
                    }
                    
                    if(consulta.equals("Equivalencia (KWH)")){
                        ResultSet x = this.peticion("select consultGasEquivalence('" + boxMonth1.getSelectedItem() + "')");
                        ResultSet y = this.peticion("select consultGasEquivalence('" + boxMonth2.getSelectedItem() + "')");
                        DefaultCategoryDataset dc = new DefaultCategoryDataset();
                        
                        while(x.next() && y.next()){
                            dc.setValue(x.getDouble(1), "Valor", (String)boxMonth1.getSelectedItem());
                            dc.setValue(y.getDouble(1), "Valor", (String)boxMonth2.getSelectedItem());
                        }
                        
                        JFreeChart c = ChartFactory.createBarChart("Equivalencia (KWH)", "Mes", "Costo", dc, PlotOrientation.VERTICAL, false, true, false);
                        CategoryPlot cp = c.getCategoryPlot();
                        cp.setRangeGridlinePaint(Color.BLACK);
                        ChartFrame cf = new ChartFrame("BarChar para equivalencia gas (KWH)", c);
                        cf.setVisible(true);
                        cf.setSize(450, 350);
                    }
                } 
            
            } else if(internet.isSelected()){
                if(list.getSelectedValuesList().isEmpty()) JOptionPane.showMessageDialog(null,
                                                           "Debe elegir los datos que desea graficar.",
                                                           "Error Message",
                                                           JOptionPane.ERROR_MESSAGE);
                else {
                    ResultSet x = this.peticion("select consultInternet(" + boxMonth1.getSelectedItem() + "')");
                    ResultSet y = this.peticion("select consultInternet(" + boxMonth2.getSelectedItem() + "')");
                    DefaultCategoryDataset dc = new DefaultCategoryDataset();
                        
                        while(x.next() && y.next()){
                            dc.setValue(x.getDouble(1), "Valor", (String)boxMonth1.getSelectedItem());
                            dc.setValue(y.getDouble(1), "Valor", (String)boxMonth2.getSelectedItem());
                        }
                        
                        JFreeChart c = ChartFactory.createBarChart("Costo por mes", "Mes", "Costo", dc, PlotOrientation.VERTICAL, false, true, false);
                        CategoryPlot cp = c.getCategoryPlot();
                        cp.setRangeGridlinePaint(Color.BLACK);
                        ChartFrame cf = new ChartFrame("BarChar para costo internet", c);
                        cf.setVisible(true);
                        cf.setSize(450, 350);
                }
            
            } else if(telephony.isSelected()){
                if(list.getSelectedValuesList().isEmpty()) JOptionPane.showMessageDialog(null,
                                                           "Debe elegir los datos que desea graficar.",
                                                           "Error Message",
                                                           JOptionPane.ERROR_MESSAGE);
                else {
                    ResultSet x = this.peticion("select consultTelephony(" + boxMonth1.getSelectedItem() + "')");
                    ResultSet y = this.peticion("select consultTelephony(" + boxMonth2.getSelectedItem() + "')");
                    DefaultCategoryDataset dc = new DefaultCategoryDataset();
                        
                        while(x.next() && y.next()){
                            dc.setValue(x.getDouble(1), "Valor", (String)boxMonth1.getSelectedItem());
                            dc.setValue(y.getDouble(1), "Valor", (String)boxMonth2.getSelectedItem());
                        }
                        
                        JFreeChart c = ChartFactory.createBarChart("Costo por mes", "Mes", "Costo", dc, PlotOrientation.VERTICAL, false, true, false);
                        CategoryPlot cp = c.getCategoryPlot();
                        cp.setRangeGridlinePaint(Color.BLACK);
                        ChartFrame cf = new ChartFrame("BarChar para costo telefonía", c);
                        cf.setVisible(true);
                        cf.setSize(450, 350);
                }
                
            } else if(tv.isSelected()){
                if(list.getSelectedValuesList().isEmpty()) JOptionPane.showMessageDialog(null,
                                                           "Debe elegir los datos que desea graficar.",
                                                           "Error Message",
                                                           JOptionPane.ERROR_MESSAGE);
                else {
                    ResultSet x = this.peticion("select consultTV(" + boxMonth1.getSelectedItem() + "')");
                    ResultSet y = this.peticion("select consultTV(" + boxMonth2.getSelectedItem() + "')"); 
                    DefaultCategoryDataset dc = new DefaultCategoryDataset();
                        
                        while(x.next() && y.next()){
                            dc.setValue(x.getDouble(1), "Valor", (String)boxMonth1.getSelectedItem());
                            dc.setValue(y.getDouble(1), "Valor", (String)boxMonth2.getSelectedItem());
                        }
                        
                        JFreeChart c = ChartFactory.createBarChart("Costo por mes", "Mes", "Costo", dc, PlotOrientation.VERTICAL, false, true, false);
                        CategoryPlot cp = c.getCategoryPlot();
                        cp.setRangeGridlinePaint(Color.BLACK);
                        ChartFrame cf = new ChartFrame("BarChar para costo televisión", c);
                        cf.setVisible(true);
                        cf.setSize(450, 350);
                }
                
            } else {
                JOptionPane.showMessageDialog(null,
                                              "Debe elegir los datos que desea graficar.",
                                              "Error Message",
                                              JOptionPane.ERROR_MESSAGE);
            }
            
        } catch (SQLException e) {
            
        }
    }//GEN-LAST:event_bGraficarActionPerformed

    private void energyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_energyActionPerformed
        if(energy.isSelected()) {
            aqueduct.setEnabled(false);
            sewerage.setEnabled(false);
            gas.setEnabled(false);
            telephony.setEnabled(false);
            tv.setEnabled(false);
            internet.setEnabled(false);
            String[] es = {"Costo por mes", "Consumo (KWH)", "Costo unitario", "Beneficio"};
            list.setListData(es);
            setEnableT();
        } else {
           aqueduct.setEnabled(true);
            sewerage.setEnabled(true);
            gas.setEnabled(true);
            telephony.setEnabled(true);
            tv.setEnabled(true);
            internet.setEnabled(true); 
            clearList();
            setEnable();
        }
    }//GEN-LAST:event_energyActionPerformed

    private void aqueductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aqueductActionPerformed
        if(aqueduct.isSelected()) {
            sewerage.setEnabled(false);
            gas.setEnabled(false);
            telephony.setEnabled(false);
            tv.setEnabled(false);
            internet.setEnabled(false);
            energy.setEnabled(false);
            String[] es = {"Costo por mes", "Consumo (M3)", "Costo unitario", "Beneficio"};
            list.setListData(es);
            setEnableT();
        } else {
            sewerage.setEnabled(true);
            gas.setEnabled(true);
            telephony.setEnabled(true);
            tv.setEnabled(true);
            internet.setEnabled(true);
            energy.setEnabled(true);
            clearList();
            setEnable();
        }
    }//GEN-LAST:event_aqueductActionPerformed

    private void sewerageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sewerageActionPerformed
        if(sewerage.isSelected()) {
            gas.setEnabled(false);
            telephony.setEnabled(false);
            tv.setEnabled(false);
            internet.setEnabled(false);
            energy.setEnabled(false);
            aqueduct.setEnabled(false);
            String[] es = {"Costo por mes", "Consumo (M3)", "Costo unitario", "Beneficio"};
            list.setListData(es);
            setEnableT();
        } else {
            gas.setEnabled(true);
            telephony.setEnabled(true);
            tv.setEnabled(true);
            internet.setEnabled(true);
            energy.setEnabled(true);
            aqueduct.setEnabled(true);
            clearList();
            setEnable();
        }
    }//GEN-LAST:event_sewerageActionPerformed

    private void gasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gasActionPerformed
        if(gas.isSelected()) {
            telephony.setEnabled(false);
            tv.setEnabled(false);
            internet.setEnabled(false);
            energy.setEnabled(false);
            aqueduct.setEnabled(false);
            sewerage.setEnabled(false);
            String[] es = {"Costo por mes", "Consumo (M3)", "Costo unitario", "Beneficio", "Diferencia (M3)", "Equivalencia (KHW)"};
            list.setListData(es);
            setEnableT();
        } else {
            telephony.setEnabled(true);
            tv.setEnabled(true);
            internet.setEnabled(true);
            energy.setEnabled(true);
            aqueduct.setEnabled(true);
            sewerage.setEnabled(true);
            clearList();
            setEnable();
        }
    }//GEN-LAST:event_gasActionPerformed

    private void tvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tvActionPerformed
        if(tv.isSelected()) {
            internet.setEnabled(false);
            energy.setEnabled(false);
            aqueduct.setEnabled(false);
            sewerage.setEnabled(false);
            gas.setEnabled(false);
            telephony.setEnabled(false);
            String[] es = {"Costo por mes", "Canales"};
            list.setListData(es);
            setEnableT();
        } else {
            internet.setEnabled(true);
            energy.setEnabled(true);
            aqueduct.setEnabled(true);
            sewerage.setEnabled(true);
            gas.setEnabled(true);
            telephony.setEnabled(true);
            clearList();
            setEnable();
        }
    }//GEN-LAST:event_tvActionPerformed

    private void internetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_internetActionPerformed
        if(internet.isSelected()) {
            energy.setEnabled(false);
            aqueduct.setEnabled(false);
            sewerage.setEnabled(false);
            gas.setEnabled(false);
            telephony.setEnabled(false);
            tv.setEnabled(false);
            String[] es = {"Costo por mes", "Velocidad (MBS)"};
            list.setListData(es);
            setEnableT();
        } else {
           energy.setEnabled(true);
            aqueduct.setEnabled(true);
            sewerage.setEnabled(true);
            gas.setEnabled(true);
            telephony.setEnabled(true);
            tv.setEnabled(true); 
            clearList();
            setEnable();
        }
    }//GEN-LAST:event_internetActionPerformed

    private void telephonyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_telephonyActionPerformed
        if(telephony.isSelected()) {
            tv.setEnabled(false);
            internet.setEnabled(false);
            energy.setEnabled(false);
            aqueduct.setEnabled(false);
            sewerage.setEnabled(false);
            gas.setEnabled(false);
            String[] es = {"Costo por mes", "Minutos"};
            list.setListData(es);
            setEnableT();
        } else {
           tv.setEnabled(true);
            internet.setEnabled(true);
            energy.setEnabled(true);
            aqueduct.setEnabled(true);
            sewerage.setEnabled(true);
            gas.setEnabled(true); 
            clearList();
            setEnable();
        }
    }//GEN-LAST:event_telephonyActionPerformed
    
    public void clearList() {
        String[] es = {};
        list.setListData(es);
    }
    
    public void setEnable() {
        year1.setEnabled(false);
        year2.setEnabled(false);
        boxMonth2.setEnabled(false);
        boxMonth1.setEnabled(false);
    }
    
    public void setEnableT() {
        year1.setEnabled(true);
        year2.setEnabled(true);
        boxMonth2.setEnabled(true);
        boxMonth1.setEnabled(true);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReadOrg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReadOrg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReadOrg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReadOrg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ReadOrg(user).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton aqueduct;
    private javax.swing.JButton bGraficar;
    private javax.swing.JComboBox<String> boxMonth1;
    private javax.swing.JComboBox<String> boxMonth2;
    private javax.swing.JRadioButton energy;
    private javax.swing.JRadioButton gas;
    private javax.swing.JRadioButton internet;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblmonth1;
    private javax.swing.JLabel lblmonth2;
    private javax.swing.JLabel lblyear1;
    private javax.swing.JLabel lblyear2;
    private javax.swing.JList<String> list;
    private javax.swing.JRadioButton sewerage;
    private javax.swing.JRadioButton telephony;
    private javax.swing.JRadioButton tv;
    private javax.swing.JLabel vs;
    private javax.swing.JComboBox<Integer> year1;
    private javax.swing.JComboBox<Integer> year2;
    // End of variables declaration//GEN-END:variables
}
